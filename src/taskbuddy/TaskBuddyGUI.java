/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package taskbuddy;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.UUID;

/**
 * Main GUI class for the TaskBuddy application.
 * This class handles all user interactions and delegates task logic to the TaskManager.
 */
public class TaskBuddyGUI extends javax.swing.JFrame {

    // The TaskManager instance to handle all task-related operations
    private final TaskManager taskManager;
    
    // Map to hold categories for easy retrieval by name
    private final Map<String, Category> categoryMap;

    private DefaultTableModel tableModel;
    private final String[] columnNames = {"ID", "Title", "Description", "Due Date", "Priority", "Status", "Category"};
    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    /**
     * Creates new form TaskBuddyGUI
     */
    public TaskBuddyGUI() {
        // Initialize GUI components generated by the NetBeans Form Editor
        initComponents();
        
        // Initialize the TaskManager and Categories
        this.taskManager = new TaskManager();
        this.categoryMap = new HashMap<>();
        
        // Create and store categories in the map
        Category workCategory = new Category(taskManager.generateCategoryId(), "Work");
        Category personalCategory = new Category(taskManager.generateCategoryId(), "Personal");
        Category studiesCategory = new Category(taskManager.generateCategoryId(), "Studies");
        categoryMap.put(workCategory.getCategoryName(), workCategory);
        categoryMap.put(personalCategory.getCategoryName(), personalCategory);
        categoryMap.put(studiesCategory.getCategoryName(), studiesCategory);

        // Set up combo box models with task properties
        String[] priorities = {"High", "Medium", "Low"};
        priorityComboBox.setModel(new DefaultComboBoxModel<>(priorities));
        
        String[] statuses = {"To Do", "In Progress", "Completed"};
        statusComboBox.setModel(new DefaultComboBoxModel<>(statuses));
        
        // Use the map to get category names for the combo box
        String[] categoryNames = categoryMap.keySet().toArray(new String[0]);
        categoryComboBox.setModel(new DefaultComboBoxModel<>(categoryNames));
        
        // Set up the JTable's model
        this.tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make cells non-editable
            }
        };
        taskTable.setModel(this.tableModel);
        
        // Add some sample tasks to the manager
        loadInitialTasks();
        
        // Refresh the table with any initial tasks
        refreshTable();
        
        // Add action listeners to the buttons
        AddButton.addActionListener(this::addTask);
        UpdateButton.addActionListener(this::updateTask);
        DeleteButton.addActionListener(this::deleteTask);
        
        // Add a mouse listener to the table to select tasks for editing/deleting
        taskTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = taskTable.getSelectedRow();
                if (row != -1) {
                    populateFieldsFromTable(row);
                }
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        titleField = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        descriptionArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        dueDateField = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        priorityField = new javax.swing.JLabel();
        priorityComboBox = new javax.swing.JComboBox<>();
        statusField = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        categoryField = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taskTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WELCOME TO TASKBUDDY");
        setBackground(new java.awt.Color(215, 197, 155));

        jPanel2.setBackground(new java.awt.Color(224, 198, 149));

        AddButton.setText("AddTask");
        AddButton.setMaximumSize(new java.awt.Dimension(86, 23));
        AddButton.setMinimumSize(new java.awt.Dimension(86, 23));
        AddButton.setPreferredSize(new java.awt.Dimension(86, 23));

        UpdateButton.setText("UpdateTask");

        DeleteButton.setText("DeleteTask");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(UpdateButton)
                .addGap(145, 145, 145)
                .addComponent(DeleteButton)
                .addGap(197, 197, 197)
                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateButton)
                    .addComponent(DeleteButton)
                    .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBackground(new java.awt.Color(224, 198, 149));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        titleField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleField.setText("Title");
        jPanel1.add(titleField);

        jTextField1.setMaximumSize(new java.awt.Dimension(32767, 214));
        jPanel1.add(jTextField1);

        descriptionArea.setText("Description");
        jPanel1.add(descriptionArea);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setMaximumSize(new java.awt.Dimension(214, 214));
        jTextArea1.setMinimumSize(new java.awt.Dimension(64, 22));
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);

        dueDateField.setText("Due Date");
        jPanel1.add(dueDateField);

        jTextField2.setMaximumSize(new java.awt.Dimension(32767, 214));
        jPanel1.add(jTextField2);

        priorityField.setText("Priority");
        jPanel1.add(priorityField);

        priorityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(priorityComboBox);

        statusField.setText("Status");
        jPanel1.add(statusField);

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(statusComboBox);

        categoryField.setText("Category");
        jPanel1.add(categoryField);

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(categoryComboBox);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setBackground(new java.awt.Color(224, 198, 149));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 402));

        taskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        taskTable.setMinimumSize(new java.awt.Dimension(60, 100));
        jScrollPane2.setViewportView(taskTable);

        jPanel3.add(jScrollPane2);

        getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_END);

        jLabel1.setBackground(new java.awt.Color(224, 198, 149));
        jLabel1.setFont(new java.awt.Font("Algerian", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("WELCOME TO TASKBUDDY");
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    // <editor-fold defaultstate="collapsed" desc="Custom Methods">
       /**
     * Adds some initial tasks to the TaskManager for demonstration.
     */
    private void loadInitialTasks() {
        taskManager.addTask("Complete Java GUI project", "Finish the user interface for the To-Do list app.", LocalDate.of(2025, 8, 10), "High", "In Progress", categoryMap.get("Work"));
        taskManager.addTask("Buy groceries", "Milk, eggs, bread, and fruits.", LocalDate.of(2025, 8, 7), "Medium", "To Do", categoryMap.get("Personal"));
        taskManager.addTask("Read 'The Great Gatsby'", "Read chapters 1-3 for literature class.", LocalDate.of(2025, 8, 15), "High", "To Do", categoryMap.get("Studies"));
    }
    
    /**
     * Refreshes the JTable with the current list of tasks from the TaskManager.
     */
    private void refreshTable() {
        // Clear existing rows from the table model
        tableModel.setRowCount(0);
        
        // Get all tasks and add them to the table
        List<Task> allTasks = taskManager.listAllTasks();
        for (Task task : allTasks) {
            Object[] rowData = {
                task.getTaskId(),
                task.getTitle(),
                task.getDescription(),
                task.getDueDate().format(dateFormatter), // Format the date for display
                task.getPriority(),
                task.getStatus(),
                task.getCategory().getCategoryName()
            };
            tableModel.addRow(rowData);
        }
    }
    
    /**
     * Adds a new task based on the input fields.
     */
    private void addTask(ActionEvent evt) {
        try {
            String title = jTextField1.getText();
            String description = jTextArea1.getText();
            String dueDateStr = jTextField2.getText();
            String priority = (String) priorityComboBox.getSelectedItem();
            String status = (String) statusComboBox.getSelectedItem();
            String categoryName = (String) categoryComboBox.getSelectedItem();

            if (title.isEmpty() || dueDateStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Title and Due Date cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            LocalDate dueDate = LocalDate.parse(dueDateStr, dateFormatter);
            Category category = categoryMap.get(categoryName);
            
            taskManager.addTask(title, description, dueDate, priority, status, category);
            
            JOptionPane.showMessageDialog(this, "Task added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputFields();
            refreshTable();

        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while adding the task.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Updates an existing task based on the selected table row and input fields.
     */
    private void updateTask(ActionEvent evt) {
        int selectedRow = taskTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a task to update.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String taskId = (String) tableModel.getValueAt(selectedRow, 0);
            String title = jTextField1.getText();
            String description = jTextArea1.getText();
            String dueDateStr = jTextField2.getText();
            String priority = (String) priorityComboBox.getSelectedItem();
            String status = (String) statusComboBox.getSelectedItem();
            String categoryName = (String) categoryComboBox.getSelectedItem();
            
            if (title.isEmpty() || dueDateStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Title and Due Date cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            LocalDate dueDate = LocalDate.parse(dueDateStr, dateFormatter);
            Category category = categoryMap.get(categoryName);
            
            taskManager.updateTask(taskId, title, description, dueDate, priority, status, category);

            JOptionPane.showMessageDialog(this, "Task updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputFields();
            refreshTable();

        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while updating the task.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Deletes the selected task from the table and TaskManager.
     */
    private void deleteTask(ActionEvent evt) {
        int selectedRow = taskTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a task to delete.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this task?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String taskId = (String) tableModel.getValueAt(selectedRow, 0);
            taskManager.removeTask(taskId);
            
            JOptionPane.showMessageDialog(this, "Task deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputFields();
            refreshTable();
        }
    }
    
    /**
     * Populates the input fields with data from a selected table row.
     * @param row The index of the selected row.
     */
    private void populateFieldsFromTable(int row) {
        String title = (String) tableModel.getValueAt(row, 1);
        String description = (String) tableModel.getValueAt(row, 2);
        String dueDateStr = (String) tableModel.getValueAt(row, 3);
        String priority = (String) tableModel.getValueAt(row, 4);
        String status = (String) tableModel.getValueAt(row, 5);
        String categoryName = (String) tableModel.getValueAt(row, 6);

        // Populate the fields
        jTextField1.setText(title);
        jTextArea1.setText(description);
        jTextField2.setText(dueDateStr);
        priorityComboBox.setSelectedItem(priority);
        statusComboBox.setSelectedItem(status);
        categoryComboBox.setSelectedItem(categoryName);
    }
    
    /**
     * Clears all input fields.
     */
    private void clearInputFields() {
        jTextField1.setText("");
        jTextArea1.setText("");
        jTextField2.setText("");
        priorityComboBox.setSelectedIndex(0);
        statusComboBox.setSelectedIndex(0);
        categoryComboBox.setSelectedIndex(0);
        taskTable.clearSelection();
    }
    
    // </editor-fold>
    
    /**
     * Main method to run the application
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskBuddyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> new TaskBuddyGUI().setVisible(true));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryField;
    private javax.swing.JLabel descriptionArea;
    private javax.swing.JLabel dueDateField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox<String> priorityComboBox;
    private javax.swing.JLabel priorityField;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JLabel statusField;
    private javax.swing.JTable taskTable;
    private javax.swing.JLabel titleField;
    // End of variables declaration//GEN-END:variables
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// NOTE: The following classes, Task, Category, and TaskManager, would be in separate files in your actual project.
// I've included them here for demonstration to make this code block a complete, runnable example.
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------


